# autogenerated with
# python -m pwiz --engine=mysql --host=127.0.0.1 --port=3306 nova > nova_models.py
from peewee import *

database = MySQLDatabase('nova')

class UnknownField(object):
    def __init__(self, *_, **__): pass

class BaseModel(Model):
    class Meta:
        database = database

class AgentBuilds(BaseModel):
    architecture = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    hypervisor = CharField(null=True)
    md5hash = CharField(null=True)
    os = CharField(null=True)
    updated_at = DateTimeField(null=True)
    url = CharField(null=True)
    version = CharField(null=True)

    class Meta:
        db_table = 'agent_builds'
        indexes = (
            (('hypervisor', 'os', 'architecture'), False),
            (('hypervisor', 'os', 'architecture', 'deleted'), True),
        )

class Aggregates(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    name = CharField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'aggregates'

class AggregateHosts(BaseModel):
    aggregate = ForeignKeyField(db_column='aggregate_id', rel_model=Aggregates, to_field='id')
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    host = CharField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'aggregate_hosts'
        indexes = (
            (('host', 'aggregate', 'deleted'), True),
        )

class AggregateMetadata(BaseModel):
    aggregate = ForeignKeyField(db_column='aggregate_id', rel_model=Aggregates, to_field='id')
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    key = CharField(index=True)
    updated_at = DateTimeField(null=True)
    value = CharField()

    class Meta:
        db_table = 'aggregate_metadata'
        indexes = (
            (('aggregate', 'key', 'deleted'), True),
        )

class Instances(BaseModel):
    access_ip_v4 = CharField(null=True)
    access_ip_v6 = CharField(null=True)
    architecture = CharField(null=True)
    auto_disk_config = IntegerField(null=True)
    availability_zone = CharField(null=True)
    cell_name = CharField(null=True)
    cleaned = IntegerField(null=True)
    config_drive = CharField(null=True)
    created_at = DateTimeField(null=True)
    default_ephemeral_device = CharField(null=True)
    default_swap_device = CharField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    disable_terminate = IntegerField(null=True)
    display_description = CharField(null=True)
    display_name = CharField(null=True)
    ephemeral_gb = IntegerField(null=True)
    ephemeral_key_uuid = CharField(null=True)
    host = CharField(null=True)
    hostname = CharField(null=True)
    image_ref = CharField(null=True)
    instance_type = IntegerField(db_column='instance_type_id', null=True)
    internal = IntegerField(db_column='internal_id', null=True)
    kernel = CharField(db_column='kernel_id', null=True)
    key_data = TextField(null=True)
    key_name = CharField(null=True)
    launch_index = IntegerField(null=True)
    launched_at = DateTimeField(null=True)
    launched_on = TextField(null=True)
    locked = IntegerField(null=True)
    locked_by = CharField(null=True)
    memory_mb = IntegerField(null=True)
    node = CharField(null=True)
    os_type = CharField(null=True)
    power_state = IntegerField(null=True)
    progress = IntegerField(null=True)
    project = CharField(db_column='project_id', null=True)
    ramdisk = CharField(db_column='ramdisk_id', null=True)
    reservation = CharField(db_column='reservation_id', index=True, null=True)
    root_device_name = CharField(null=True)
    root_gb = IntegerField(null=True)
    scheduled_at = DateTimeField(null=True)
    shutdown_terminate = IntegerField(null=True)
    task_state = CharField(null=True)
    terminated_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    user_data = TextField(null=True)
    user = CharField(db_column='user_id', null=True)
    uuid = CharField(unique=True)
    vcpus = IntegerField(null=True)
    vm_mode = CharField(null=True)
    vm_state = CharField(null=True)

    class Meta:
        db_table = 'instances'
        indexes = (
            (('host', 'deleted', 'cleaned'), False),
            (('host', 'node', 'deleted'), False),
            (('project', 'deleted'), False),
            (('task_state', 'updated_at'), False),
            (('terminated_at', 'launched_at'), False),
            (('uuid', 'deleted'), False),
        )

class BlockDeviceMapping(BaseModel):
    boot_index = IntegerField(null=True)
    connection_info = TextField(null=True)
    created_at = DateTimeField(null=True)
    delete_on_termination = IntegerField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    destination_type = CharField(null=True)
    device_name = CharField(null=True)
    device_type = CharField(null=True)
    disk_bus = CharField(null=True)
    guest_format = CharField(null=True)
    image = CharField(db_column='image_id', null=True)
    instance_uuid = ForeignKeyField(db_column='instance_uuid', null=True, rel_model=Instances, to_field='uuid')
    no_device = IntegerField(null=True)
    snapshot = CharField(db_column='snapshot_id', index=True, null=True)
    source_type = CharField(null=True)
    updated_at = DateTimeField(null=True)
    volume = CharField(db_column='volume_id', index=True, null=True)
    volume_size = IntegerField(null=True)

    class Meta:
        db_table = 'block_device_mapping'
        indexes = (
            (('instance_uuid', 'device_name'), False),
            (('instance_uuid', 'volume'), False),
        )

class BwUsageCache(BaseModel):
    bw_in = BigIntegerField(null=True)
    bw_out = BigIntegerField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    last_ctr_in = BigIntegerField(null=True)
    last_ctr_out = BigIntegerField(null=True)
    last_refreshed = DateTimeField(null=True)
    mac = CharField(null=True)
    start_period = DateTimeField()
    updated_at = DateTimeField(null=True)
    uuid = CharField(null=True)

    class Meta:
        db_table = 'bw_usage_cache'
        indexes = (
            (('uuid', 'start_period'), False),
        )

class Cells(BaseModel):
    api_url = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    is_parent = IntegerField(null=True)
    name = CharField(null=True)
    transport_url = CharField()
    updated_at = DateTimeField(null=True)
    weight_offset = FloatField(null=True)
    weight_scale = FloatField(null=True)

    class Meta:
        db_table = 'cells'
        indexes = (
            (('name', 'deleted'), True),
        )

class Certificates(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    file_name = CharField(null=True)
    project = CharField(db_column='project_id', null=True)
    updated_at = DateTimeField(null=True)
    user = CharField(db_column='user_id', null=True)

    class Meta:
        db_table = 'certificates'
        indexes = (
            (('project', 'deleted'), False),
            (('user', 'deleted'), False),
        )

class ComputeNodes(BaseModel):
    cpu_info = TextField()
    created_at = DateTimeField(null=True)
    current_workload = IntegerField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    disk_available_least = IntegerField(null=True)
    extra_resources = TextField(null=True)
    free_disk_gb = IntegerField(null=True)
    free_ram_mb = IntegerField(null=True)
    host = CharField(null=True)
    host_ip = CharField(null=True)
    hypervisor_hostname = CharField(null=True)
    hypervisor_type = TextField()
    hypervisor_version = IntegerField()
    local_gb = IntegerField()
    local_gb_used = IntegerField()
    memory_mb = IntegerField()
    memory_mb_used = IntegerField()
    metrics = TextField(null=True)
    numa_topology = TextField(null=True)
    pci_stats = TextField(null=True)
    running_vms = IntegerField(null=True)
    service = IntegerField(db_column='service_id', null=True)
    stats = TextField(null=True)
    supported_instances = TextField(null=True)
    updated_at = DateTimeField(null=True)
    vcpus = IntegerField()
    vcpus_used = IntegerField()

    class Meta:
        db_table = 'compute_nodes'
        indexes = (
            (('host', 'hypervisor_hostname', 'deleted'), True),
        )

class ConsolePools(BaseModel):
    address = CharField(null=True)
    compute_host = CharField(null=True)
    console_type = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    host = CharField(null=True)
    password = CharField(null=True)
    public_hostname = CharField(null=True)
    updated_at = DateTimeField(null=True)
    username = CharField(null=True)

    class Meta:
        db_table = 'console_pools'
        indexes = (
            (('host', 'console_type', 'compute_host', 'deleted'), True),
        )

class Consoles(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    instance_name = CharField(null=True)
    instance_uuid = ForeignKeyField(db_column='instance_uuid', null=True, rel_model=Instances, to_field='uuid')
    password = CharField(null=True)
    pool = ForeignKeyField(db_column='pool_id', null=True, rel_model=ConsolePools, to_field='id')
    port = IntegerField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'consoles'

class DnsDomains(BaseModel):
    availability_zone = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    domain = CharField(primary_key=True)
    project = CharField(db_column='project_id', index=True, null=True)
    scope = CharField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'dns_domains'
        indexes = (
            (('domain', 'deleted'), False),
        )

class FixedIps(BaseModel):
    address = CharField(index=True, null=True)
    allocated = IntegerField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    host = CharField(index=True, null=True)
    instance_uuid = ForeignKeyField(db_column='instance_uuid', null=True, rel_model=Instances, to_field='uuid')
    leased = IntegerField(null=True)
    network = IntegerField(db_column='network_id', index=True, null=True)
    reserved = IntegerField(null=True)
    updated_at = DateTimeField(null=True)
    virtual_interface = IntegerField(db_column='virtual_interface_id', index=True, null=True)

    class Meta:
        db_table = 'fixed_ips'
        indexes = (
            (('address', 'deleted'), True),
            (('address', 'deleted', 'allocated'), False),
            (('address', 'reserved', 'network', 'deleted'), False),
            (('deleted', 'allocated', 'updated_at'), False),
            (('network', 'host', 'deleted'), False),
        )

class FloatingIps(BaseModel):
    address = CharField(null=True)
    auto_assigned = IntegerField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    fixed_ip = IntegerField(db_column='fixed_ip_id', index=True, null=True)
    host = CharField(index=True, null=True)
    interface = CharField(null=True)
    pool = CharField(null=True)
    project = CharField(db_column='project_id', index=True, null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'floating_ips'
        indexes = (
            (('address', 'deleted'), True),
            (('pool', 'deleted', 'fixed_ip', 'project'), False),
        )

class InstanceActions(BaseModel):
    action = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    finish_time = DateTimeField(null=True)
    instance_uuid = ForeignKeyField(db_column='instance_uuid', null=True, rel_model=Instances, to_field='uuid')
    message = CharField(null=True)
    project = CharField(db_column='project_id', null=True)
    request = CharField(db_column='request_id', index=True, null=True)
    start_time = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    user = CharField(db_column='user_id', null=True)

    class Meta:
        db_table = 'instance_actions'

class InstanceActionsEvents(BaseModel):
    action = ForeignKeyField(db_column='action_id', null=True, rel_model=InstanceActions, to_field='id')
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    details = TextField(null=True)
    event = CharField(null=True)
    finish_time = DateTimeField(null=True)
    host = CharField(null=True)
    result = CharField(null=True)
    start_time = DateTimeField(null=True)
    traceback = TextField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'instance_actions_events'

class InstanceExtra(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    flavor = TextField(null=True)
    instance_uuid = ForeignKeyField(db_column='instance_uuid', rel_model=Instances, to_field='uuid')
    numa_topology = TextField(null=True)
    pci_requests = TextField(null=True)
    updated_at = DateTimeField(null=True)
    vcpu_model = TextField(null=True)

    class Meta:
        db_table = 'instance_extra'

class InstanceFaults(BaseModel):
    code = IntegerField()
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    details = TextField(null=True)
    host = CharField(index=True, null=True)
    instance_uuid = ForeignKeyField(db_column='instance_uuid', null=True, rel_model=Instances, to_field='uuid')
    message = CharField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'instance_faults'
        indexes = (
            (('instance_uuid', 'deleted', 'created_at'), False),
        )

class InstanceGroups(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    name = CharField(null=True)
    project = CharField(db_column='project_id', null=True)
    updated_at = DateTimeField(null=True)
    user = CharField(db_column='user_id', null=True)
    uuid = CharField()

    class Meta:
        db_table = 'instance_groups'
        indexes = (
            (('uuid', 'deleted'), True),
        )

class InstanceGroupMember(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    group = ForeignKeyField(db_column='group_id', rel_model=InstanceGroups, to_field='id')
    instance = CharField(db_column='instance_id', index=True, null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'instance_group_member'

class InstanceGroupPolicy(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    group = ForeignKeyField(db_column='group_id', rel_model=InstanceGroups, to_field='id')
    policy = CharField(index=True, null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'instance_group_policy'

class InstanceIdMappings(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    uuid = CharField(index=True)

    class Meta:
        db_table = 'instance_id_mappings'

class InstanceInfoCaches(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    instance_uuid = ForeignKeyField(db_column='instance_uuid', rel_model=Instances, to_field='uuid', unique=True)
    network_info = TextField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'instance_info_caches'

class InstanceMetadata(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    instance_uuid = ForeignKeyField(db_column='instance_uuid', null=True, rel_model=Instances, to_field='uuid')
    key = CharField(null=True)
    updated_at = DateTimeField(null=True)
    value = CharField(null=True)

    class Meta:
        db_table = 'instance_metadata'

class InstanceSystemMetadata(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    instance_uuid = ForeignKeyField(db_column='instance_uuid', rel_model=Instances, to_field='uuid')
    key = CharField()
    updated_at = DateTimeField(null=True)
    value = CharField(null=True)

    class Meta:
        db_table = 'instance_system_metadata'

class InstanceTypes(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    disabled = IntegerField(null=True)
    ephemeral_gb = IntegerField(null=True)
    flavorid = CharField(null=True)
    is_public = IntegerField(null=True)
    memory_mb = IntegerField()
    name = CharField(null=True)
    root_gb = IntegerField(null=True)
    rxtx_factor = FloatField(null=True)
    swap = IntegerField()
    updated_at = DateTimeField(null=True)
    vcpu_weight = IntegerField(null=True)
    vcpus = IntegerField()

    class Meta:
        db_table = 'instance_types'
        indexes = (
            (('flavorid', 'deleted'), True),
            (('name', 'deleted'), True),
        )

class InstanceTypeExtraSpecs(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    instance_type = ForeignKeyField(db_column='instance_type_id', rel_model=InstanceTypes, to_field='id')
    key = CharField(null=True)
    updated_at = DateTimeField(null=True)
    value = CharField(null=True)

    class Meta:
        db_table = 'instance_type_extra_specs'
        indexes = (
            (('instance_type', 'key'), False),
            (('instance_type', 'key', 'deleted'), True),
        )

class InstanceTypeProjects(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    instance_type = ForeignKeyField(db_column='instance_type_id', rel_model=InstanceTypes, to_field='id')
    project = CharField(db_column='project_id', null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'instance_type_projects'
        indexes = (
            (('instance_type', 'project', 'deleted'), True),
        )

class Volumes(BaseModel):
    attach_status = CharField(null=True)
    attach_time = DateTimeField(null=True)
    availability_zone = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = CharField(null=True)
    deleted_at = DateTimeField(null=True)
    display_description = CharField(null=True)
    display_name = CharField(null=True)
    ec2 = CharField(db_column='ec2_id', null=True)
    host = CharField(null=True)
    id = CharField(primary_key=True)
    instance_uuid = CharField(index=True, null=True)
    launched_at = DateTimeField(null=True)
    mountpoint = CharField(null=True)
    project = CharField(db_column='project_id', null=True)
    provider_auth = CharField(null=True)
    provider_location = CharField(null=True)
    scheduled_at = DateTimeField(null=True)
    size = IntegerField(null=True)
    snapshot = CharField(db_column='snapshot_id', null=True)
    status = CharField(null=True)
    terminated_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    user = CharField(db_column='user_id', null=True)
    volume_type = IntegerField(db_column='volume_type_id', null=True)

    class Meta:
        db_table = 'volumes'

class IscsiTargets(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    host = CharField(null=True)
    target_num = IntegerField(null=True)
    updated_at = DateTimeField(null=True)
    volume = ForeignKeyField(db_column='volume_id', null=True, rel_model=Volumes, to_field='id')

    class Meta:
        db_table = 'iscsi_targets'
        indexes = (
            (('host', 'volume', 'deleted'), False),
        )

class KeyPairs(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    fingerprint = CharField(null=True)
    name = CharField()
    public_key = TextField(null=True)
    type = CharField()
    updated_at = DateTimeField(null=True)
    user = CharField(db_column='user_id', null=True)

    class Meta:
        db_table = 'key_pairs'
        indexes = (
            (('user', 'name', 'deleted'), True),
        )

class MigrateVersion(BaseModel):
    repository = CharField(db_column='repository_id', primary_key=True)
    repository_path = TextField(null=True)
    version = IntegerField(null=True)

    class Meta:
        db_table = 'migrate_version'

class Migrations(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    dest_compute = CharField(null=True)
    dest_host = CharField(null=True)
    dest_node = CharField(null=True)
    instance_uuid = ForeignKeyField(db_column='instance_uuid', null=True, rel_model=Instances, to_field='uuid')
    new_instance_type = IntegerField(db_column='new_instance_type_id', null=True)
    old_instance_type = IntegerField(db_column='old_instance_type_id', null=True)
    source_compute = CharField(null=True)
    source_node = CharField(null=True)
    status = CharField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'migrations'
        indexes = (
            (('deleted', 'instance_uuid', 'status'), False),
            (('deleted', 'source_compute', 'dest_compute', 'source_node', 'dest_node', 'status'), False),
        )

class Networks(BaseModel):
    bridge = CharField(null=True)
    bridge_interface = CharField(null=True)
    broadcast = CharField(null=True)
    cidr = CharField(null=True)
    cidr_v6 = CharField(index=True, null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    dhcp_server = CharField(null=True)
    dhcp_start = CharField(null=True)
    dns1 = CharField(null=True)
    dns2 = CharField(null=True)
    enable_dhcp = IntegerField(null=True)
    gateway = CharField(null=True)
    gateway_v6 = CharField(null=True)
    host = CharField(index=True, null=True)
    injected = IntegerField(null=True)
    label = CharField(null=True)
    mtu = IntegerField(null=True)
    multi_host = IntegerField(null=True)
    netmask = CharField(null=True)
    netmask_v6 = CharField(null=True)
    priority = IntegerField(null=True)
    project = CharField(db_column='project_id', null=True)
    rxtx_base = IntegerField(null=True)
    share_address = IntegerField(null=True)
    updated_at = DateTimeField(null=True)
    uuid = CharField(null=True)
    vlan = IntegerField(null=True)
    vpn_private_address = CharField(null=True)
    vpn_public_address = CharField(null=True)
    vpn_public_port = IntegerField(null=True)

    class Meta:
        db_table = 'networks'
        indexes = (
            (('bridge', 'deleted'), False),
            (('project', 'deleted'), False),
            (('uuid', 'project', 'deleted'), False),
            (('vlan', 'deleted'), False),
            (('vlan', 'deleted'), True),
        )

class PciDevices(BaseModel):
    address = CharField()
    compute_node = ForeignKeyField(db_column='compute_node_id', rel_model=ComputeNodes, to_field='id')
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    dev = CharField(db_column='dev_id', null=True)
    dev_type = CharField()
    extra_info = TextField(null=True)
    instance_uuid = CharField(null=True)
    label = CharField()
    numa_node = IntegerField(null=True)
    product = CharField(db_column='product_id')
    request = CharField(db_column='request_id', null=True)
    status = CharField()
    updated_at = DateTimeField(null=True)
    vendor = CharField(db_column='vendor_id')

    class Meta:
        db_table = 'pci_devices'
        indexes = (
            (('compute_node', 'address', 'deleted'), True),
            (('compute_node', 'deleted'), False),
            (('instance_uuid', 'deleted'), False),
        )

class ProjectUserQuotas(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    hard_limit = IntegerField(null=True)
    project = CharField(db_column='project_id')
    resource = CharField()
    updated_at = DateTimeField(null=True)
    user = CharField(db_column='user_id')

    class Meta:
        db_table = 'project_user_quotas'
        indexes = (
            (('project', 'deleted'), False),
            (('user', 'deleted'), False),
            (('user', 'project', 'resource', 'deleted'), True),
        )

class ProviderFwRules(BaseModel):
    cidr = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    from_port = IntegerField(null=True)
    protocol = CharField(null=True)
    to_port = IntegerField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'provider_fw_rules'

class QuotaClasses(BaseModel):
    class_name = CharField(index=True, null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    hard_limit = IntegerField(null=True)
    resource = CharField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'quota_classes'

class QuotaUsages(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    in_use = IntegerField()
    project = CharField(db_column='project_id', index=True, null=True)
    reserved = IntegerField()
    resource = CharField()
    until_refresh = IntegerField(null=True)
    updated_at = DateTimeField(null=True)
    user = CharField(db_column='user_id', null=True)

    class Meta:
        db_table = 'quota_usages'
        indexes = (
            (('user', 'deleted'), False),
        )

class Quotas(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    hard_limit = IntegerField(null=True)
    project = CharField(db_column='project_id', null=True)
    resource = CharField()
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'quotas'
        indexes = (
            (('project', 'resource', 'deleted'), True),
        )

class Reservations(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    delta = IntegerField()
    expire = DateTimeField(null=True)
    project = CharField(db_column='project_id', index=True, null=True)
    resource = CharField(null=True)
    updated_at = DateTimeField(null=True)
    usage = ForeignKeyField(db_column='usage_id', rel_model=QuotaUsages, to_field='id')
    user = CharField(db_column='user_id', null=True)
    uuid = CharField(index=True)

    class Meta:
        db_table = 'reservations'
        indexes = (
            (('deleted', 'expire'), False),
            (('user', 'deleted'), False),
        )

class S3Images(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    uuid = CharField()

    class Meta:
        db_table = 's3_images'

class SecurityGroupDefaultRules(BaseModel):
    cidr = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    from_port = IntegerField(null=True)
    protocol = CharField(null=True)
    to_port = IntegerField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'security_group_default_rules'

class SecurityGroups(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    description = CharField(null=True)
    name = CharField(null=True)
    project = CharField(db_column='project_id', null=True)
    updated_at = DateTimeField(null=True)
    user = CharField(db_column='user_id', null=True)

    class Meta:
        db_table = 'security_groups'
        indexes = (
            (('project', 'name', 'deleted'), True),
        )

class SecurityGroupInstanceAssociation(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    instance_uuid = ForeignKeyField(db_column='instance_uuid', null=True, rel_model=Instances, to_field='uuid')
    security_group = ForeignKeyField(db_column='security_group_id', null=True, rel_model=SecurityGroups, to_field='id')
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'security_group_instance_association'

class SecurityGroupRules(BaseModel):
    cidr = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    from_port = IntegerField(null=True)
    group = ForeignKeyField(db_column='group_id', null=True, rel_model=SecurityGroups, to_field='id')
    parent_group = ForeignKeyField(db_column='parent_group_id', null=True, rel_model=SecurityGroups, related_name='security_groups_parent_group_set', to_field='id')
    protocol = CharField(null=True)
    to_port = IntegerField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'security_group_rules'

class Services(BaseModel):
    binary = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    disabled = IntegerField(null=True)
    disabled_reason = CharField(null=True)
    host = CharField(null=True)
    report_count = IntegerField()
    topic = CharField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'services'
        indexes = (
            (('host', 'binary', 'deleted'), True),
            (('host', 'topic', 'deleted'), True),
        )

class ShadowAgentBuilds(BaseModel):
    architecture = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    hypervisor = CharField(null=True)
    md5hash = CharField(null=True)
    os = CharField(null=True)
    updated_at = DateTimeField(null=True)
    url = CharField(null=True)
    version = CharField(null=True)

    class Meta:
        db_table = 'shadow_agent_builds'

class ShadowAggregateHosts(BaseModel):
    aggregate = IntegerField(db_column='aggregate_id')
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    host = CharField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'shadow_aggregate_hosts'

class ShadowAggregateMetadata(BaseModel):
    aggregate = IntegerField(db_column='aggregate_id')
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    key = CharField()
    updated_at = DateTimeField(null=True)
    value = CharField()

    class Meta:
        db_table = 'shadow_aggregate_metadata'

class ShadowAggregates(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    name = CharField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'shadow_aggregates'

class ShadowBlockDeviceMapping(BaseModel):
    boot_index = IntegerField(null=True)
    connection_info = TextField(null=True)
    created_at = DateTimeField(null=True)
    delete_on_termination = IntegerField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    destination_type = CharField(null=True)
    device_name = CharField(null=True)
    device_type = CharField(null=True)
    disk_bus = CharField(null=True)
    guest_format = CharField(null=True)
    image = CharField(db_column='image_id', null=True)
    instance_uuid = CharField(null=True)
    no_device = IntegerField(null=True)
    snapshot = CharField(db_column='snapshot_id', null=True)
    source_type = CharField(null=True)
    updated_at = DateTimeField(null=True)
    volume = CharField(db_column='volume_id', null=True)
    volume_size = IntegerField(null=True)

    class Meta:
        db_table = 'shadow_block_device_mapping'

class ShadowBwUsageCache(BaseModel):
    bw_in = BigIntegerField(null=True)
    bw_out = BigIntegerField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    last_ctr_in = BigIntegerField(null=True)
    last_ctr_out = BigIntegerField(null=True)
    last_refreshed = DateTimeField(null=True)
    mac = CharField(null=True)
    start_period = DateTimeField()
    updated_at = DateTimeField(null=True)
    uuid = CharField(null=True)

    class Meta:
        db_table = 'shadow_bw_usage_cache'

class ShadowCells(BaseModel):
    api_url = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    is_parent = IntegerField(null=True)
    name = CharField(null=True)
    transport_url = CharField()
    updated_at = DateTimeField(null=True)
    weight_offset = FloatField(null=True)
    weight_scale = FloatField(null=True)

    class Meta:
        db_table = 'shadow_cells'

class ShadowCertificates(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    file_name = CharField(null=True)
    project = CharField(db_column='project_id', null=True)
    updated_at = DateTimeField(null=True)
    user = CharField(db_column='user_id', null=True)

    class Meta:
        db_table = 'shadow_certificates'

class ShadowComputeNodes(BaseModel):
    cpu_info = TextField()
    created_at = DateTimeField(null=True)
    current_workload = IntegerField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    disk_available_least = IntegerField(null=True)
    extra_resources = TextField(null=True)
    free_disk_gb = IntegerField(null=True)
    free_ram_mb = IntegerField(null=True)
    host = CharField(null=True)
    host_ip = CharField(null=True)
    hypervisor_hostname = CharField(null=True)
    hypervisor_type = TextField()
    hypervisor_version = IntegerField()
    local_gb = IntegerField()
    local_gb_used = IntegerField()
    memory_mb = IntegerField()
    memory_mb_used = IntegerField()
    metrics = TextField(null=True)
    numa_topology = TextField(null=True)
    pci_stats = TextField(null=True)
    running_vms = IntegerField(null=True)
    service = IntegerField(db_column='service_id', null=True)
    stats = TextField(null=True)
    supported_instances = TextField(null=True)
    updated_at = DateTimeField(null=True)
    vcpus = IntegerField()
    vcpus_used = IntegerField()

    class Meta:
        db_table = 'shadow_compute_nodes'

class ShadowConsolePools(BaseModel):
    address = CharField(null=True)
    compute_host = CharField(null=True)
    console_type = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    host = CharField(null=True)
    password = CharField(null=True)
    public_hostname = CharField(null=True)
    updated_at = DateTimeField(null=True)
    username = CharField(null=True)

    class Meta:
        db_table = 'shadow_console_pools'

class ShadowConsoles(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    instance_name = CharField(null=True)
    instance_uuid = CharField(null=True)
    password = CharField(null=True)
    pool = IntegerField(db_column='pool_id', null=True)
    port = IntegerField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'shadow_consoles'

class ShadowDnsDomains(BaseModel):
    availability_zone = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    domain = CharField(primary_key=True)
    project = CharField(db_column='project_id', null=True)
    scope = CharField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'shadow_dns_domains'

class ShadowFixedIps(BaseModel):
    address = CharField(null=True)
    allocated = IntegerField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    host = CharField(null=True)
    instance_uuid = CharField(null=True)
    leased = IntegerField(null=True)
    network = IntegerField(db_column='network_id', null=True)
    reserved = IntegerField(null=True)
    updated_at = DateTimeField(null=True)
    virtual_interface = IntegerField(db_column='virtual_interface_id', null=True)

    class Meta:
        db_table = 'shadow_fixed_ips'

class ShadowFloatingIps(BaseModel):
    address = CharField(null=True)
    auto_assigned = IntegerField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    fixed_ip = IntegerField(db_column='fixed_ip_id', null=True)
    host = CharField(null=True)
    interface = CharField(null=True)
    pool = CharField(null=True)
    project = CharField(db_column='project_id', null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'shadow_floating_ips'

class ShadowInstanceActions(BaseModel):
    action = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    finish_time = DateTimeField(null=True)
    instance_uuid = CharField(null=True)
    message = CharField(null=True)
    project = CharField(db_column='project_id', null=True)
    request = CharField(db_column='request_id', null=True)
    start_time = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    user = CharField(db_column='user_id', null=True)

    class Meta:
        db_table = 'shadow_instance_actions'

class ShadowInstanceActionsEvents(BaseModel):
    action = IntegerField(db_column='action_id', null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    details = TextField(null=True)
    event = CharField(null=True)
    finish_time = DateTimeField(null=True)
    host = CharField(null=True)
    result = CharField(null=True)
    start_time = DateTimeField(null=True)
    traceback = TextField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'shadow_instance_actions_events'

class ShadowInstanceExtra(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    flavor = TextField(null=True)
    instance_uuid = CharField(index=True)
    numa_topology = TextField(null=True)
    pci_requests = TextField(null=True)
    updated_at = DateTimeField(null=True)
    vcpu_model = TextField(null=True)

    class Meta:
        db_table = 'shadow_instance_extra'

class ShadowInstanceFaults(BaseModel):
    code = IntegerField()
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    details = TextField(null=True)
    host = CharField(null=True)
    instance_uuid = CharField(null=True)
    message = CharField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'shadow_instance_faults'

class ShadowInstanceGroupMember(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    group = IntegerField(db_column='group_id')
    instance = CharField(db_column='instance_id', null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'shadow_instance_group_member'

class ShadowInstanceGroupPolicy(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    group = IntegerField(db_column='group_id')
    policy = CharField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'shadow_instance_group_policy'

class ShadowInstanceGroups(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    name = CharField(null=True)
    project = CharField(db_column='project_id', null=True)
    updated_at = DateTimeField(null=True)
    user = CharField(db_column='user_id', null=True)
    uuid = CharField()

    class Meta:
        db_table = 'shadow_instance_groups'

class ShadowInstanceIdMappings(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    uuid = CharField()

    class Meta:
        db_table = 'shadow_instance_id_mappings'

class ShadowInstanceInfoCaches(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    instance_uuid = CharField()
    network_info = TextField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'shadow_instance_info_caches'

class ShadowInstanceMetadata(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    instance_uuid = CharField(null=True)
    key = CharField(null=True)
    updated_at = DateTimeField(null=True)
    value = CharField(null=True)

    class Meta:
        db_table = 'shadow_instance_metadata'

class ShadowInstanceSystemMetadata(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    instance_uuid = CharField()
    key = CharField()
    updated_at = DateTimeField(null=True)
    value = CharField(null=True)

    class Meta:
        db_table = 'shadow_instance_system_metadata'

class ShadowInstanceTypeExtraSpecs(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    instance_type = IntegerField(db_column='instance_type_id')
    key = CharField(null=True)
    updated_at = DateTimeField(null=True)
    value = CharField(null=True)

    class Meta:
        db_table = 'shadow_instance_type_extra_specs'

class ShadowInstanceTypeProjects(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    instance_type = IntegerField(db_column='instance_type_id')
    project = CharField(db_column='project_id', null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'shadow_instance_type_projects'

class ShadowInstanceTypes(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    disabled = IntegerField(null=True)
    ephemeral_gb = IntegerField(null=True)
    flavorid = CharField(null=True)
    is_public = IntegerField(null=True)
    memory_mb = IntegerField()
    name = CharField(null=True)
    root_gb = IntegerField(null=True)
    rxtx_factor = FloatField(null=True)
    swap = IntegerField()
    updated_at = DateTimeField(null=True)
    vcpu_weight = IntegerField(null=True)
    vcpus = IntegerField()

    class Meta:
        db_table = 'shadow_instance_types'

class ShadowInstances(BaseModel):
    access_ip_v4 = CharField(null=True)
    access_ip_v6 = CharField(null=True)
    architecture = CharField(null=True)
    auto_disk_config = IntegerField(null=True)
    availability_zone = CharField(null=True)
    cell_name = CharField(null=True)
    cleaned = IntegerField(null=True)
    config_drive = CharField(null=True)
    created_at = DateTimeField(null=True)
    default_ephemeral_device = CharField(null=True)
    default_swap_device = CharField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    disable_terminate = IntegerField(null=True)
    display_description = CharField(null=True)
    display_name = CharField(null=True)
    ephemeral_gb = IntegerField(null=True)
    ephemeral_key_uuid = CharField(null=True)
    host = CharField(null=True)
    hostname = CharField(null=True)
    image_ref = CharField(null=True)
    instance_type = IntegerField(db_column='instance_type_id', null=True)
    internal = IntegerField(db_column='internal_id', null=True)
    kernel = CharField(db_column='kernel_id', null=True)
    key_data = TextField(null=True)
    key_name = CharField(null=True)
    launch_index = IntegerField(null=True)
    launched_at = DateTimeField(null=True)
    launched_on = TextField(null=True)
    locked = IntegerField(null=True)
    locked_by = CharField(null=True)
    memory_mb = IntegerField(null=True)
    node = CharField(null=True)
    os_type = CharField(null=True)
    power_state = IntegerField(null=True)
    progress = IntegerField(null=True)
    project = CharField(db_column='project_id', null=True)
    ramdisk = CharField(db_column='ramdisk_id', null=True)
    reservation = CharField(db_column='reservation_id', null=True)
    root_device_name = CharField(null=True)
    root_gb = IntegerField(null=True)
    scheduled_at = DateTimeField(null=True)
    shutdown_terminate = IntegerField(null=True)
    task_state = CharField(null=True)
    terminated_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    user_data = TextField(null=True)
    user = CharField(db_column='user_id', null=True)
    uuid = CharField()
    vcpus = IntegerField(null=True)
    vm_mode = CharField(null=True)
    vm_state = CharField(null=True)

    class Meta:
        db_table = 'shadow_instances'

class ShadowIscsiTargets(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    host = CharField(null=True)
    target_num = IntegerField(null=True)
    updated_at = DateTimeField(null=True)
    volume = CharField(db_column='volume_id', null=True)

    class Meta:
        db_table = 'shadow_iscsi_targets'

class ShadowKeyPairs(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    fingerprint = CharField(null=True)
    name = CharField(null=True)
    public_key = TextField(null=True)
    type = CharField()
    updated_at = DateTimeField(null=True)
    user = CharField(db_column='user_id', null=True)

    class Meta:
        db_table = 'shadow_key_pairs'

class ShadowMigrateVersion(BaseModel):
    repository = CharField(db_column='repository_id', primary_key=True)
    repository_path = TextField(null=True)
    version = IntegerField(null=True)

    class Meta:
        db_table = 'shadow_migrate_version'

class ShadowMigrations(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    dest_compute = CharField(null=True)
    dest_host = CharField(null=True)
    dest_node = CharField(null=True)
    instance_uuid = CharField(null=True)
    new_instance_type = IntegerField(db_column='new_instance_type_id', null=True)
    old_instance_type = IntegerField(db_column='old_instance_type_id', null=True)
    source_compute = CharField(null=True)
    source_node = CharField(null=True)
    status = CharField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'shadow_migrations'

class ShadowNetworks(BaseModel):
    bridge = CharField(null=True)
    bridge_interface = CharField(null=True)
    broadcast = CharField(null=True)
    cidr = CharField(null=True)
    cidr_v6 = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    dhcp_server = CharField(null=True)
    dhcp_start = CharField(null=True)
    dns1 = CharField(null=True)
    dns2 = CharField(null=True)
    enable_dhcp = IntegerField(null=True)
    gateway = CharField(null=True)
    gateway_v6 = CharField(null=True)
    host = CharField(null=True)
    injected = IntegerField(null=True)
    label = CharField(null=True)
    mtu = IntegerField(null=True)
    multi_host = IntegerField(null=True)
    netmask = CharField(null=True)
    netmask_v6 = CharField(null=True)
    priority = IntegerField(null=True)
    project = CharField(db_column='project_id', null=True)
    rxtx_base = IntegerField(null=True)
    share_address = IntegerField(null=True)
    updated_at = DateTimeField(null=True)
    uuid = CharField(null=True)
    vlan = IntegerField(null=True)
    vpn_private_address = CharField(null=True)
    vpn_public_address = CharField(null=True)
    vpn_public_port = IntegerField(null=True)

    class Meta:
        db_table = 'shadow_networks'

class ShadowPciDevices(BaseModel):
    address = CharField()
    compute_node = IntegerField(db_column='compute_node_id')
    created_at = DateTimeField(null=True)
    deleted = IntegerField()
    deleted_at = DateTimeField(null=True)
    dev = CharField(db_column='dev_id', null=True)
    dev_type = CharField(null=True)
    extra_info = TextField(null=True)
    instance_uuid = CharField(null=True)
    label = CharField()
    numa_node = IntegerField(null=True)
    product = CharField(db_column='product_id', null=True)
    request = CharField(db_column='request_id', null=True)
    status = CharField()
    updated_at = DateTimeField(null=True)
    vendor = CharField(db_column='vendor_id', null=True)

    class Meta:
        db_table = 'shadow_pci_devices'

class ShadowProjectUserQuotas(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    hard_limit = IntegerField(null=True)
    project = CharField(db_column='project_id')
    resource = CharField()
    updated_at = DateTimeField(null=True)
    user = CharField(db_column='user_id')

    class Meta:
        db_table = 'shadow_project_user_quotas'

class ShadowProviderFwRules(BaseModel):
    cidr = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    from_port = IntegerField(null=True)
    protocol = CharField(null=True)
    to_port = IntegerField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'shadow_provider_fw_rules'

class ShadowQuotaClasses(BaseModel):
    class_name = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    hard_limit = IntegerField(null=True)
    resource = CharField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'shadow_quota_classes'

class ShadowQuotaUsages(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    in_use = IntegerField()
    project = CharField(db_column='project_id', null=True)
    reserved = IntegerField()
    resource = CharField(null=True)
    until_refresh = IntegerField(null=True)
    updated_at = DateTimeField(null=True)
    user = CharField(db_column='user_id', null=True)

    class Meta:
        db_table = 'shadow_quota_usages'

class ShadowQuotas(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    hard_limit = IntegerField(null=True)
    project = CharField(db_column='project_id', null=True)
    resource = CharField()
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'shadow_quotas'

class ShadowReservations(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    delta = IntegerField()
    expire = DateTimeField(null=True)
    project = CharField(db_column='project_id', null=True)
    resource = CharField(null=True)
    updated_at = DateTimeField(null=True)
    usage = IntegerField(db_column='usage_id')
    user = CharField(db_column='user_id', null=True)
    uuid = CharField()

    class Meta:
        db_table = 'shadow_reservations'

class ShadowS3Images(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    uuid = CharField()

    class Meta:
        db_table = 'shadow_s3_images'

class ShadowSecurityGroupDefaultRules(BaseModel):
    cidr = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    from_port = IntegerField(null=True)
    protocol = CharField(null=True)
    to_port = IntegerField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'shadow_security_group_default_rules'

class ShadowSecurityGroupInstanceAssociation(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    instance_uuid = CharField(null=True)
    security_group = IntegerField(db_column='security_group_id', null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'shadow_security_group_instance_association'

class ShadowSecurityGroupRules(BaseModel):
    cidr = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    from_port = IntegerField(null=True)
    group = IntegerField(db_column='group_id', null=True)
    parent_group = IntegerField(db_column='parent_group_id', null=True)
    protocol = CharField(null=True)
    to_port = IntegerField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'shadow_security_group_rules'

class ShadowSecurityGroups(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    description = CharField(null=True)
    name = CharField(null=True)
    project = CharField(db_column='project_id', null=True)
    updated_at = DateTimeField(null=True)
    user = CharField(db_column='user_id', null=True)

    class Meta:
        db_table = 'shadow_security_groups'

class ShadowServices(BaseModel):
    binary = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    disabled = IntegerField(null=True)
    disabled_reason = CharField(null=True)
    host = CharField(null=True)
    report_count = IntegerField()
    topic = CharField(null=True)
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'shadow_services'

class ShadowSnapshotIdMappings(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    uuid = CharField()

    class Meta:
        db_table = 'shadow_snapshot_id_mappings'

class ShadowSnapshots(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = CharField(null=True)
    deleted_at = DateTimeField(null=True)
    display_description = CharField(null=True)
    display_name = CharField(null=True)
    id = CharField(primary_key=True)
    progress = CharField(null=True)
    project = CharField(db_column='project_id', null=True)
    scheduled_at = DateTimeField(null=True)
    status = CharField(null=True)
    updated_at = DateTimeField(null=True)
    user = CharField(db_column='user_id', null=True)
    volume = CharField(db_column='volume_id')
    volume_size = IntegerField(null=True)

    class Meta:
        db_table = 'shadow_snapshots'

class ShadowTaskLog(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    errors = IntegerField(null=True)
    host = CharField()
    message = CharField()
    period_beginning = DateTimeField()
    period_ending = DateTimeField()
    state = CharField()
    task_items = IntegerField(null=True)
    task_name = CharField()
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'shadow_task_log'

class ShadowVirtualInterfaces(BaseModel):
    address = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    instance_uuid = CharField(null=True)
    network = IntegerField(db_column='network_id', null=True)
    updated_at = DateTimeField(null=True)
    uuid = CharField(null=True)

    class Meta:
        db_table = 'shadow_virtual_interfaces'

class ShadowVolumeIdMappings(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    uuid = CharField()

    class Meta:
        db_table = 'shadow_volume_id_mappings'

class ShadowVolumeUsageCache(BaseModel):
    availability_zone = CharField(null=True)
    created_at = DateTimeField(null=True)
    curr_last_refreshed = DateTimeField(null=True)
    curr_read_bytes = BigIntegerField(null=True)
    curr_reads = BigIntegerField(null=True)
    curr_write_bytes = BigIntegerField(null=True)
    curr_writes = BigIntegerField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    instance_uuid = CharField(null=True)
    project = CharField(db_column='project_id', null=True)
    tot_last_refreshed = DateTimeField(null=True)
    tot_read_bytes = BigIntegerField(null=True)
    tot_reads = BigIntegerField(null=True)
    tot_write_bytes = BigIntegerField(null=True)
    tot_writes = BigIntegerField(null=True)
    updated_at = DateTimeField(null=True)
    user = CharField(db_column='user_id', null=True)
    volume = CharField(db_column='volume_id')

    class Meta:
        db_table = 'shadow_volume_usage_cache'

class ShadowVolumes(BaseModel):
    attach_status = CharField(null=True)
    attach_time = DateTimeField(null=True)
    availability_zone = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = CharField(null=True)
    deleted_at = DateTimeField(null=True)
    display_description = CharField(null=True)
    display_name = CharField(null=True)
    ec2 = CharField(db_column='ec2_id', null=True)
    host = CharField(null=True)
    id = CharField(primary_key=True)
    instance_uuid = CharField(null=True)
    launched_at = DateTimeField(null=True)
    mountpoint = CharField(null=True)
    project = CharField(db_column='project_id', null=True)
    provider_auth = CharField(null=True)
    provider_location = CharField(null=True)
    scheduled_at = DateTimeField(null=True)
    size = IntegerField(null=True)
    snapshot = CharField(db_column='snapshot_id', null=True)
    status = CharField(null=True)
    terminated_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    user = CharField(db_column='user_id', null=True)
    volume_type = IntegerField(db_column='volume_type_id', null=True)

    class Meta:
        db_table = 'shadow_volumes'

class SnapshotIdMappings(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    uuid = CharField()

    class Meta:
        db_table = 'snapshot_id_mappings'

class Snapshots(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = CharField(null=True)
    deleted_at = DateTimeField(null=True)
    display_description = CharField(null=True)
    display_name = CharField(null=True)
    id = CharField(primary_key=True)
    progress = CharField(null=True)
    project = CharField(db_column='project_id', null=True)
    scheduled_at = DateTimeField(null=True)
    status = CharField(null=True)
    updated_at = DateTimeField(null=True)
    user = CharField(db_column='user_id', null=True)
    volume = CharField(db_column='volume_id')
    volume_size = IntegerField(null=True)

    class Meta:
        db_table = 'snapshots'

class Tags(BaseModel):
    resource = CharField(db_column='resource_id')
    tag = CharField(index=True)

    class Meta:
        db_table = 'tags'
        indexes = (
            (('resource', 'tag'), True),
        )
        primary_key = CompositeKey('resource', 'tag')

class TaskLog(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    errors = IntegerField(null=True)
    host = CharField(index=True)
    message = CharField()
    period_beginning = DateTimeField(index=True)
    period_ending = DateTimeField(index=True)
    state = CharField()
    task_items = IntegerField(null=True)
    task_name = CharField()
    updated_at = DateTimeField(null=True)

    class Meta:
        db_table = 'task_log'
        indexes = (
            (('task_name', 'host', 'period_beginning', 'period_ending'), True),
        )

class VirtualInterfaces(BaseModel):
    address = CharField(null=True)
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    instance_uuid = ForeignKeyField(db_column='instance_uuid', null=True, rel_model=Instances, to_field='uuid')
    network = IntegerField(db_column='network_id', index=True, null=True)
    updated_at = DateTimeField(null=True)
    uuid = CharField(null=True)

    class Meta:
        db_table = 'virtual_interfaces'
        indexes = (
            (('address', 'deleted'), True),
        )

class VolumeIdMappings(BaseModel):
    created_at = DateTimeField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    updated_at = DateTimeField(null=True)
    uuid = CharField()

    class Meta:
        db_table = 'volume_id_mappings'

class VolumeUsageCache(BaseModel):
    availability_zone = CharField(null=True)
    created_at = DateTimeField(null=True)
    curr_last_refreshed = DateTimeField(null=True)
    curr_read_bytes = BigIntegerField(null=True)
    curr_reads = BigIntegerField(null=True)
    curr_write_bytes = BigIntegerField(null=True)
    curr_writes = BigIntegerField(null=True)
    deleted = IntegerField(null=True)
    deleted_at = DateTimeField(null=True)
    instance_uuid = CharField(null=True)
    project = CharField(db_column='project_id', null=True)
    tot_last_refreshed = DateTimeField(null=True)
    tot_read_bytes = BigIntegerField(null=True)
    tot_reads = BigIntegerField(null=True)
    tot_write_bytes = BigIntegerField(null=True)
    tot_writes = BigIntegerField(null=True)
    updated_at = DateTimeField(null=True)
    user = CharField(db_column='user_id', null=True)
    volume = CharField(db_column='volume_id')

    class Meta:
        db_table = 'volume_usage_cache'
